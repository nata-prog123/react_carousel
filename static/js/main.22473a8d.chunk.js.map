{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","position","next","move","props","images","step","frameSize","infinite","maxTransform","length","countMove","setState","this","itemWidth","animationDuration","maxTransf","className","style","width","map","image","index","src","transform","transition","alt","toString","type","onClick","React","Component","App","action","htmlFor","id","value","onChange","event","target","min","max","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.22473a8d.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean,\n};\n\ntype State = {\n  position: number;\n};\n\nexport class Carousel extends React.Component<Props, State> {\n  state = {\n    position: 0,\n  };\n\n  next = (move: boolean): void => {\n    const {\n      images,\n      step,\n      frameSize,\n      infinite,\n    } = this.props;\n    const { position } = this.state;\n\n    const maxTransform = (images.length - frameSize);\n\n    let countMove = move\n      ? position + step\n      : position - step;\n\n    if (countMove >= maxTransform) {\n      if (infinite) {\n        countMove = 0;\n      }\n\n      if (!infinite) {\n        countMove = maxTransform;\n      }\n    }\n\n    if (countMove < 0) {\n      countMove = 0;\n      if (infinite) {\n        countMove = maxTransform;\n      }\n    }\n\n    this.setState({ position: countMove });\n  };\n\n  render() {\n    const {\n      images,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.props;\n\n    const { position } = this.state;\n\n    const maxTransf = (images.length - frameSize) * itemWidth;\n\n    return (\n      <>\n        <div\n          className=\"Carousel\"\n          style={{ width: `${frameSize * itemWidth}px` }}\n        >\n          <ul className=\"Carousel__list\">\n            {images.map((image, index) => (\n              <li key={image}>\n                <img\n                  src={image}\n                  style={{\n                    width: `${itemWidth}px`,\n                    transform: `translateX(${-position * itemWidth}px)`,\n                    transition: `${animationDuration}ms`,\n                  }}\n                  alt={index.toString()}\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <div className=\"buttons\">\n          <button\n            className={(position <= 0 && !infinite)\n              ? 'buttons__button buttons__button--deactivated'\n              : 'buttons__button'}\n            type=\"button\"\n            onClick={() => this.next(false)}\n          >\n            &#10232; Prev\n          </button>\n          <button\n            className={(position * itemWidth === maxTransf && !infinite)\n              ? 'buttons__button buttons__button--deactivated'\n              : 'buttons__button'}\n            data-cy=\"next\"\n            type=\"button\"\n            onClick={() => this.next(true)}\n          >\n            Next &#10233;\n          </button>\n        </div>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\n\ninterface State {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean,\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 data-cy=\"title\">{`Carousel with ${images.length} images`}</h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n\n        <form className=\"form\" action=\"#\">\n          <label className=\"label\" htmlFor=\"stepName\">Step:</label>\n          <input\n            type=\"number\"\n            id=\"step_id\"\n            className=\"input\"\n            value={step}\n            onChange={(event) => {\n              this.setState({\n                step: +event.target.value,\n              });\n            }}\n            min=\"1\"\n            max={images.length - 4}\n          />\n\n          <label className=\"label\" htmlFor=\"frameSizeName\">\n            Frame Size:\n          </label>\n          <input\n            type=\"number\"\n            id=\"size_id\"\n            className=\"input\"\n            value={frameSize}\n            onChange={(event) => {\n              this.setState({\n                frameSize: +event.target.value,\n              });\n            }}\n            min=\"1\"\n            max={images.length}\n          />\n\n          <label className=\"label\" htmlFor=\"itemWidthName\">\n            Width:\n          </label>\n          <input\n            type=\"number\"\n            id=\"width_id\"\n            className=\"input\"\n            value={itemWidth}\n            onChange={(event) => {\n              this.setState({\n                itemWidth: +event.target.value,\n              });\n            }}\n            min=\"50\"\n            step=\"10\"\n            max=\"450\"\n          />\n\n          <label className=\"label\" htmlFor=\"animationName\">\n            Animation duration:\n          </label>\n          <input\n            type=\"number\"\n            id=\"animation_id\"\n            className=\"input\"\n            value={animationDuration}\n            onChange={(event) => {\n              this.setState({\n                animationDuration: +event.target.value,\n              });\n            }}\n            min=\"1000\"\n          />\n\n          <label className=\"label\" htmlFor=\"infiniteName\">\n            Endlessly\n          </label>\n          <input\n            type=\"checkbox\"\n            id=\"infinite_id\"\n            className=\"input\"\n            onChange={(event) => {\n              this.setState({\n                infinite: event.target.checked,\n              });\n            }}\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}