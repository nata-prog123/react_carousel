{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","position","next","move","props","images","step","frameSize","itemWidth","infinite","maxTransform","length","countMove","setState","this","animationDuration","size","maxTransf","className","style","width","map","image","index","src","transform","transition","alt","toString","type","onClick","React","Component","App","stepSet","event","currentTarget","value","frameSizeSet","itemWidthSet","animationDurationSet","infiniteSet","checked","action","htmlFor","id","defaultValue","onChange","min","max","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.810a2fb4.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean,\n};\n\ntype State = {\n  position: number;\n};\n\nexport class Carousel extends React.Component<Props, State> {\n  state = {\n    position: 0,\n  };\n\n  next = (move: boolean): void => {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      infinite,\n    } = this.props;\n    const { position } = this.state;\n\n    const maxTransform = (images.length - frameSize) * itemWidth;\n\n    let countMove = move\n      ? position + step * itemWidth\n      : position - step * itemWidth;\n\n    if (countMove >= maxTransform) {\n      countMove = maxTransform;\n      if (infinite) {\n        if (maxTransform !== 0) {\n          countMove = 0;\n        }\n      }\n    }\n\n    if (countMove < 0) {\n      countMove = 0;\n      if (infinite) {\n        countMove = maxTransform;\n      }\n    }\n\n    this.setState({ position: countMove });\n  };\n\n  render() {\n    const {\n      images,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.props;\n\n    const { position } = this.state;\n\n    const size = frameSize * itemWidth;\n    const maxTransf = (images.length - frameSize) * itemWidth;\n\n    return (\n      <>\n        <div\n          className=\"Carousel\"\n          style={{\n            width: `${size}px`,\n          }}\n        >\n          <ul className=\"Carousel__list\">\n            {images.map((image, index) => (\n              <li key={image}>\n                <img\n                  src={image}\n                  style={{\n                    width: `${itemWidth}px`,\n                    transform: `translateX(${-position}px)`,\n                    transition: `${animationDuration}ms`,\n                  }}\n                  alt={index.toString()}\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <div className=\"buttons\">\n          <button\n            className={(position && !infinite)\n              ? 'buttons__button buttons__button--deactivated'\n              : 'buttons__button'}\n            type=\"button\"\n            onClick={() => this.next(false)}\n          >\n            &#10232; Prev\n          </button>\n          <button\n            className={(position === maxTransf && !infinite)\n              ? 'buttons__button buttons__button--deactivated'\n              : 'buttons__button'}\n            data-cy=\"next\"\n            type=\"button\"\n            onClick={() => this.next(true)}\n          >\n            Next &#10233;\n          </button>\n        </div>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\n\ninterface State {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean,\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  stepSet = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ step: +event.currentTarget.value });\n  };\n\n  frameSizeSet = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ frameSize: +event.currentTarget.value });\n  };\n\n  itemWidthSet = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ itemWidth: +event.currentTarget.value });\n  };\n\n  animationDurationSet = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ animationDuration: +event.currentTarget.value });\n  };\n\n  infiniteSet = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ infinite: event.currentTarget.checked });\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 data-cy=\"title\">\n          {'Carousel with '}\n          {images.length}\n          {' images'}\n        </h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n\n        <form className=\"form\" action=\"#\">\n          <label className=\"label\" htmlFor=\"stepName\">Step:</label>\n          <input\n            type=\"number\"\n            id=\"step_id\"\n            className=\"step__input\"\n            defaultValue={step}\n            onChange={this.stepSet}\n            min=\"1\"\n            max={images.length}\n          />\n\n          <label className=\"label\" htmlFor=\"frameSizeName\">\n            Frame Size:\n          </label>\n          <input\n            type=\"number\"\n            id=\"size_id\"\n            className=\"size__input\"\n            defaultValue={frameSize}\n            onChange={this.frameSizeSet}\n            min=\"1\"\n            max={images.length}\n          />\n\n          <label className=\"label\" htmlFor=\"itemWidthName\">\n            Width:\n          </label>\n          <input\n            type=\"number\"\n            id=\"width_id\"\n            className=\"width__input\"\n            defaultValue={itemWidth}\n            onChange={this.itemWidthSet}\n            min=\"130\"\n          />\n\n          <label className=\"label\" htmlFor=\"animationName\">\n            Animation duration:\n          </label>\n          <input\n            type=\"number\"\n            id=\"animation_id\"\n            className=\"animation__input\"\n            defaultValue={animationDuration}\n            onChange={this.animationDurationSet}\n            min=\"1000\"\n          />\n\n          <label className=\"label\" htmlFor=\"infiniteName\">\n            Endlessly\n          </label>\n          <input\n            type=\"checkbox\"\n            id=\"infinite_id\"\n            className=\"infinite__input\"\n            onChange={this.infiniteSet}\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}